/******************************************************************************\
|                                                                              |
|                           _long-round-chalk.scss                             |
|                                                                              |
|******************************************************************************|
|                                                                              |
|        This defines the dom and svg visual styles for this application.      |
|                                                                              |
|        Author(s): Abe Megahed                                                |
|                                                                              |
|        This file is subject to the terms and conditions defined in           |
|        'LICENSE.txt', which is part of this source code distribution.        |
|                                                                              |
|******************************************************************************|
|        Copyright (C) 2023, Specular CSS, http://www.specularcss.org          |
\******************************************************************************/

@use "../../colors/colors.scss";

//
// variables
//

$highlight-strength: 50%;

//
// mixins
//

@mixin horizontal-shading ($color: white, $border-radius: 50%, $border-style: outset) {
	background:

		// left shading
		//
		linear-gradient(to right,
			colors.darkened($color, 10%) 0%,
			transparent $border-radius) no-repeat,

		// right shading
		//
		linear-gradient(to left,
			colors.darkened($color, 10%) 0%,
			transparent $border-radius) no-repeat,

		// highlight
		//
		linear-gradient(to bottom,
			colors.faded(white, 0%) 0%,
			colors.faded(white, $highlight-strength) 15%,
			colors.faded(white, $highlight-strength) 30%,
			colors.faded(white, 0%) 50%) no-repeat,

		// diffuse
		//
		linear-gradient(to bottom,
			colors.lightened($color, 10%) 0%,
			$color 50%,
			colors.darkened($color, 10%) 100%) no-repeat;

	// borders
	//
	@if ($border-style == inset) {
		border-color: $color;
	} @else if ($border-style == outset) {
		border-color: colors.darkened($color, 10%);
	}
}

@mixin vertical-shading ($color: white, $border-radius: 50%, $border-style: outset) {
	background:

		// top shading
		//
		linear-gradient(to top,
			colors.darkened($color, 10%) 0%,
			transparent $border-radius) no-repeat,

		// bottom shading
		//
		linear-gradient(to bottom,
			colors.darkened($color, 10%) 0%,
			transparent $border-radius) no-repeat,

		// highlight
		//
		linear-gradient(to right,
			colors.faded(white, 0%) 0%,
			colors.faded(white, $highlight-strength) 15%,
			colors.faded(white, $highlight-strength) 30%,
			colors.faded(white, 0%) 50%) no-repeat,

		// diffuse
		//
		linear-gradient(to right,
			colors.lightened($color, 10%) 0%,
			$color 50%,
			colors.darkened($color, 10%) 100%) no-repeat;

	// borders
	//
	@if ($border-style == inset) {
		border-color: $color;
	} @else if ($border-style == outset) {
		border-color: colors.darkened($color, 10%);
	}
}

@mixin shading ($color: white, $direction: bottom, $border-radius: 50%, $border-style: outset) {
	@if ($direction == bottom) or ($direction == top) {
		@include horizontal-shading($color, $border-radius, $border-style);
	} @else if ($direction == left) or ($direction == right) {
		@include vertical-shading($color, $border-radius, $border-style);
	}
}

//
// multilayer mixins
//

@mixin horizontal-multilayer-shading ($color: white, $border-radius: 50%, $border-style: outset, $background-color: white) {
	background:

		// left shading
		//
		linear-gradient(to right,
			colors.darkened($color, 10%) 0%,
			transparent $border-radius) no-repeat,

		// right shading
		//
		linear-gradient(to left,
			colors.darkened($color, 10%) 0%,
			transparent $border-radius) no-repeat,

		// diffuse
		//
		linear-gradient(to bottom,
			colors.lightened($color, 10%) 0%,
			$color 50%,
			colors.darkened($color, 10%) 100%) no-repeat;

	position: relative;
	overflow: hidden;

	&:after {
		position: absolute;
		content: '';
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		pointer-events: none;

		background:

			// left shading
			//
			linear-gradient(to right,
				colors.darkened($color, 10%) 0%,
				transparent $border-radius) no-repeat,

			// right shading
			//
			linear-gradient(to left,
				colors.darkened($color, 10%) 0%,
				transparent $border-radius) no-repeat,

			// highlight
			//
			linear-gradient(to bottom,
				colors.faded(white, 0%) 0%,
				colors.faded(white, $highlight-strength) 15%,
				colors.faded(white, $highlight-strength) 30%,
				colors.faded(white, 0%) 50%) no-repeat;
	}

	// borders
	//
	@if ($border-style == inset) {
		border-color: $color;
	} @else if ($border-style == outset) {
		border-color: colors.darkened($color, 10%);
	}
}

@mixin vertical-multilayer-shading ($color: white, $border-radius: 50%, $border-style: outset, $background-color: white) {
	background:

		// top shading
		//
		linear-gradient(to top,
			colors.darkened($color, 10%) 0%,
			transparent $border-radius) no-repeat,

		// bottom shading
		//
		linear-gradient(to bottom,
			colors.darkened($color, 10%) 0%,
			transparent $border-radius) no-repeat,

		// diffuse
		//
		linear-gradient(to right,
			colors.lightened($color, 10%) 0%,
			$color 50%,
			colors.darkened($color, 10%) 100%) no-repeat;

	position: relative;
	overflow: hidden;

	&:after {
		position: absolute;
		content: '';
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		pointer-events: none;

		background:

			// top shading
			//
			linear-gradient(to top,
				colors.darkened($color, 10%) 0%,
				transparent $border-radius) no-repeat,

			// bottom shading
			//
			linear-gradient(to bottom,
				colors.darkened($color, 10%) 0%,
				transparent $border-radius) no-repeat,

			// highlight
			//
			linear-gradient(to right,
				colors.faded(white, 0%) 0%,
				colors.faded(white, $highlight-strength) 15%,
				colors.faded(white, $highlight-strength) 30%,
				colors.faded(white, 0%) 50%) no-repeat;
	}

	// borders
	//
	@if ($border-style == inset) {
		border-color: $color;
	} @else if ($border-style == outset) {
		border-color: colors.darkened($color, 10%);
	}
}

@mixin multilayer-shading ($color: white, $direction: bottom, $border-radius: 50%, $border-style: outset, $background-color: white) {
	@if ($direction == bottom) or ($direction == top) {
		@include horizontal-multilayer-shading($color, $border-radius, $border-style);
	} @else if ($direction == left) or ($direction == right) {
		@include vertical-multilayer-shading($color, $border-radius, $border-style);
	}
}